package springreact.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.Optional;

@Controller // This means that this class is a Controller
@CrossOrigin(origins = "http://localhost:3000")
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping
    public @ResponseBody Iterable<User> getAllUsers() {
        System.out.println("get all users");
        return userRepository.findAll();
    }

    @PostMapping(consumes = "application/json") // Map ONLY POST Requests
    public @ResponseBody User addNewUserJson ( @RequestBody UserPOJO user ) {
        System.out.println("json add user name: " + user.name + " email: " + user.email);
        User n = new User();
        n.setName(user.name);
        n.setEmail(user.email);
        User saved = userRepository.save(n);
        return saved;
    }

    @PutMapping(path = "/{id}", consumes = "application/json")
    public @ResponseBody User editNewUserJson ( @PathVariable int id, @RequestBody UserPOJO pojo ) {
        System.out.println("json edit user id: " + id + " name: " + pojo.name + " email: " + pojo.email);

        Optional<User> maybeUser = userRepository.findById(id);
        if (maybeUser.isEmpty()) {
            return null;
        }

        User user = maybeUser.get();
        user.setName(pojo.name);
        user.setEmail(pojo.email);
        User saved = userRepository.save(user);

        System.out.println("saved: " + saved);

        return saved;
    }

    @DeleteMapping(path = "/{id}", consumes = "application/json")
    public @ResponseBody boolean deleteUser ( @PathVariable int id ) {
        System.out.println("json delete user id: " + id);

        Optional<User> maybeUser = userRepository.findById(id);
        if (maybeUser.isEmpty()) {
            return false;
        }

        User user = maybeUser.get();
        userRepository.delete(user);

        System.out.println("deleted: " + user);

        return true;
    }
}